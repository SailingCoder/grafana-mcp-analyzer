{
  "version": 3,
  "sources": ["session-manager.js"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\n// \u4F7F\u7528\u7528\u6237\u5BB6\u76EE\u5F55\uFF0C\u4E0Edata-store.ts\u4FDD\u6301\u4E00\u81F4\nconst BASE_STORAGE_DIR = path.join(os.homedir(), '.grafana-mcp-analyzer', 'data-store');\nconst SESSIONS_DIR = path.join(BASE_STORAGE_DIR, 'sessions');\nconst INDEXES_DIR = path.join(BASE_STORAGE_DIR, 'indexes');\n// \u786E\u4FDD\u76EE\u5F55\u5B58\u5728\n[SESSIONS_DIR, INDEXES_DIR].forEach(dir => {\n    if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n    }\n});\n/**\n * \u521B\u5EFA\u65B0\u4F1A\u8BDD\n */\nexport async function createSession(metadata = {}) {\n    const sessionId = `session-${Date.now()}-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;\n    const sessionDir = path.join(SESSIONS_DIR, sessionId);\n    fs.mkdirSync(sessionDir);\n    fs.mkdirSync(path.join(sessionDir, 'requests'));\n    fs.mkdirSync(path.join(sessionDir, 'responses'));\n    const sessionMetadata = {\n        id: sessionId,\n        created: new Date().toISOString(),\n        lastUpdated: new Date().toISOString(),\n        requestCount: 0,\n        ...metadata\n    };\n    await fs.promises.writeFile(path.join(sessionDir, 'metadata.json'), JSON.stringify(sessionMetadata, null, 2), 'utf-8');\n    // \u66F4\u65B0\u4F1A\u8BDD\u7D22\u5F15\n    await updateSessionIndex(sessionId, sessionMetadata);\n    return sessionId;\n}\n/**\n * \u66F4\u65B0\u4F1A\u8BDD\u7D22\u5F15\n */\nasync function updateSessionIndex(sessionId, metadata) {\n    const indexPath = path.join(INDEXES_DIR, 'sessions-index.json');\n    let index = {};\n    try {\n        if (fs.existsSync(indexPath)) {\n            const data = await fs.promises.readFile(indexPath, 'utf-8');\n            index = JSON.parse(data);\n        }\n    }\n    catch (error) {\n        console.error('\u8BFB\u53D6\u4F1A\u8BDD\u7D22\u5F15\u5931\u8D25\uFF0C\u521B\u5EFA\u65B0\u7D22\u5F15', error);\n    }\n    index[sessionId] = {\n        created: metadata.created,\n        lastUpdated: metadata.lastUpdated,\n        requestCount: metadata.requestCount,\n        description: metadata.description\n    };\n    await fs.promises.writeFile(indexPath, JSON.stringify(index, null, 2), 'utf-8');\n}\n/**\n * \u83B7\u53D6\u4F1A\u8BDD\u4FE1\u606F\n */\nexport async function getSessionInfo(sessionId) {\n    const metadataPath = path.join(SESSIONS_DIR, sessionId, 'metadata.json');\n    try {\n        const data = await fs.promises.readFile(metadataPath, 'utf-8');\n        return JSON.parse(data);\n    }\n    catch (error) {\n        throw new Error(`\u65E0\u6CD5\u83B7\u53D6\u4F1A\u8BDD\u4FE1\u606F: ${error instanceof Error ? error.message : String(error)}`);\n    }\n}\n/**\n * \u66F4\u65B0\u4F1A\u8BDD\u4FE1\u606F\n */\nexport async function updateSessionInfo(sessionId, updates) {\n    const metadataPath = path.join(SESSIONS_DIR, sessionId, 'metadata.json');\n    try {\n        const data = await fs.promises.readFile(metadataPath, 'utf-8');\n        const metadata = JSON.parse(data);\n        const updatedMetadata = {\n            ...metadata,\n            ...updates,\n            lastUpdated: new Date().toISOString()\n        };\n        await fs.promises.writeFile(metadataPath, JSON.stringify(updatedMetadata, null, 2), 'utf-8');\n        await updateSessionIndex(sessionId, updatedMetadata);\n        return updatedMetadata;\n    }\n    catch (error) {\n        throw new Error(`\u65E0\u6CD5\u66F4\u65B0\u4F1A\u8BDD\u4FE1\u606F: ${error instanceof Error ? error.message : String(error)}`);\n    }\n}\n/**\n * \u5217\u51FA\u6240\u6709\u4F1A\u8BDD\n */\nexport async function listSessions(limit = 10) {\n    const indexPath = path.join(INDEXES_DIR, 'sessions-index.json');\n    try {\n        if (!fs.existsSync(indexPath)) {\n            return [];\n        }\n        const data = await fs.promises.readFile(indexPath, 'utf-8');\n        const index = JSON.parse(data);\n        return Object.entries(index)\n            .map(([id, metadata]) => ({\n            id,\n            created: metadata.created || new Date(0).toISOString(),\n            lastUpdated: metadata.lastUpdated || new Date(0).toISOString(),\n            requestCount: metadata.requestCount || 0,\n            description: metadata.description\n        }))\n            .sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime())\n            .slice(0, limit);\n    }\n    catch (error) {\n        console.error('\u5217\u51FA\u4F1A\u8BDD\u5931\u8D25', error);\n        return [];\n    }\n}\n/**\n * \u5220\u9664\u4F1A\u8BDD\n */\nexport async function deleteSession(sessionId) {\n    const sessionDir = path.join(SESSIONS_DIR, sessionId);\n    const indexPath = path.join(INDEXES_DIR, 'sessions-index.json');\n    try {\n        // \u68C0\u67E5\u4F1A\u8BDD\u662F\u5426\u5B58\u5728\n        if (!fs.existsSync(sessionDir)) {\n            throw new Error(`\u4F1A\u8BDD\u4E0D\u5B58\u5728: ${sessionId}`);\n        }\n        // \u5220\u9664\u4F1A\u8BDD\u76EE\u5F55\n        await fs.promises.rm(sessionDir, { recursive: true, force: true });\n        // \u66F4\u65B0\u7D22\u5F15\n        if (fs.existsSync(indexPath)) {\n            const data = await fs.promises.readFile(indexPath, 'utf-8');\n            const index = JSON.parse(data);\n            if (index[sessionId]) {\n                delete index[sessionId];\n                await fs.promises.writeFile(indexPath, JSON.stringify(index, null, 2), 'utf-8');\n            }\n        }\n        return true;\n    }\n    catch (error) {\n        console.error(`\u5220\u9664\u4F1A\u8BDD ${sessionId} \u5931\u8D25:`, error);\n        return false;\n    }\n}\n"],
  "mappings": "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",
  "names": ["fs", "path", "os", "BASE_STORAGE_DIR", "SESSIONS_DIR", "INDEXES_DIR", "dir", "createSession", "metadata", "sessionId", "sessionDir", "sessionMetadata", "updateSessionIndex", "indexPath", "index", "data", "error", "getSessionInfo", "metadataPath", "updateSessionInfo", "updates", "updatedMetadata", "listSessions", "limit", "id", "a", "b", "deleteSession"]
}

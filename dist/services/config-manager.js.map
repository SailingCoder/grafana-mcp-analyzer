{
  "version": 3,
  "sources": ["config-manager.js"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport { createRequire } from 'module';\n/**\n * \u52A0\u8F7D\u914D\u7F6E\n */\nexport async function loadConfig(configPath) {\n    try {\n        // \u4F18\u5148\u4F7F\u7528\u4F20\u5165\u7684\u8DEF\u5F84\uFF0C\u5176\u6B21\u4F7F\u7528\u73AF\u5883\u53D8\u91CF\n        const configFilePath = configPath || process.env['CONFIG_PATH'];\n        if (!configFilePath) {\n            throw new Error('\u8BF7\u6307\u5B9A\u914D\u7F6E\u6587\u4EF6\u8DEF\u5F84\u3002\u4F7F\u7528\u53C2\u6570\u4F20\u5165\u6216\u8BBE\u7F6E CONFIG_PATH \u73AF\u5883\u53D8\u91CF');\n        }\n        const resolvedPath = path.resolve(process.cwd(), configFilePath);\n        if (!fs.existsSync(resolvedPath)) {\n            throw new Error(`\u914D\u7F6E\u6587\u4EF6\u4E0D\u5B58\u5728: ${resolvedPath}`);\n        }\n        // \u4F7F\u7528require\u52A0\u8F7D\u914D\u7F6E\u6587\u4EF6\uFF08\u652F\u6301\u7528\u6237\u7684CommonJS\u683C\u5F0F\u914D\u7F6E\uFF09\n        // \u5728ES\u6A21\u5757\u4E2D\u521B\u5EFArequire\u51FD\u6570\n        const require = createRequire(import.meta.url);\n        // \u6E05\u9664require\u7F13\u5B58\uFF0C\u786E\u4FDD\u83B7\u53D6\u6700\u65B0\u914D\u7F6E\n        delete require.cache[resolvedPath];\n        let loadedConfig;\n        try {\n            loadedConfig = require(resolvedPath);\n        }\n        catch (error) {\n            throw new Error(`\u914D\u7F6E\u6587\u4EF6\u683C\u5F0F\u9519\u8BEF: ${error.message}\u3002\u8BF7\u786E\u4FDD\u914D\u7F6E\u6587\u4EF6\u4F7F\u7528 CommonJS \u683C\u5F0F (module.exports = config)`);\n        }\n        if (!loadedConfig || typeof loadedConfig !== 'object') {\n            throw new Error('\u914D\u7F6E\u6587\u4EF6\u683C\u5F0F\u65E0\u6548');\n        }\n        console.error('\u2705 \u914D\u7F6E\u52A0\u8F7D\u6210\u529F\uFF0C\u5305\u542B\u67E5\u8BE2:', Object.keys(loadedConfig.queries || {}).length, '\u4E2A');\n        return loadedConfig;\n    }\n    catch (error) {\n        // \u5982\u679C\u662F\u914D\u7F6E\u8DEF\u5F84\u76F8\u5173\u7684\u9519\u8BEF\uFF0C\u76F4\u63A5\u629B\u51FA\n        if (error.message.includes('\u8BF7\u6307\u5B9A\u914D\u7F6E\u6587\u4EF6\u8DEF\u5F84') ||\n            error.message.includes('\u914D\u7F6E\u6587\u4EF6\u4E0D\u5B58\u5728')) {\n            throw error;\n        }\n        // \u5176\u4ED6\u9519\u8BEF\uFF08\u5982\u89E3\u6790\u9519\u8BEF\uFF09\u4F7F\u7528\u9ED8\u8BA4\u914D\u7F6E\n        console.warn('\u26A0\uFE0F \u914D\u7F6E\u6587\u4EF6\u89E3\u6790\u5931\u8D25\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u914D\u7F6E:', error.message);\n        return {\n            baseUrl: 'https://your-grafana-instance.com',\n            defaultHeaders: { 'Content-Type': 'application/json' },\n            queries: {}\n        };\n    }\n}\n/**\n * \u4FDD\u5B58\u914D\u7F6E\n */\nexport async function saveConfig(config, configPath) {\n    try {\n        const configFilePath = configPath || process.env['CONFIG_PATH'];\n        if (!configFilePath) {\n            throw new Error('\u8BF7\u6307\u5B9A\u914D\u7F6E\u6587\u4EF6\u8DEF\u5F84\u3002\u4F7F\u7528\u53C2\u6570\u4F20\u5165\u6216\u8BBE\u7F6E CONFIG_PATH \u73AF\u5883\u53D8\u91CF');\n        }\n        const resolvedPath = path.resolve(process.cwd(), configFilePath);\n        // \u521B\u5EFA\u914D\u7F6E\u6587\u4EF6\u5185\u5BB9\n        const configContent = `const config = ${JSON.stringify(config, null, 2)};\\n\\nmodule.exports = config;`;\n        // \u786E\u4FDD\u76EE\u5F55\u5B58\u5728\n        const configDir = path.dirname(resolvedPath);\n        if (!fs.existsSync(configDir)) {\n            fs.mkdirSync(configDir, { recursive: true });\n        }\n        // \u5199\u5165\u914D\u7F6E\u6587\u4EF6\n        await fs.promises.writeFile(resolvedPath, configContent, 'utf-8');\n        console.error(`\u2705 \u914D\u7F6E\u5DF2\u4FDD\u5B58\u81F3: ${resolvedPath}`);\n        return true;\n    }\n    catch (error) {\n        console.error('\u274C \u4FDD\u5B58\u914D\u7F6E\u5931\u8D25:', error);\n        return false;\n    }\n}\n/**\n * \u83B7\u53D6\u914D\u7F6E\u6587\u4EF6\u8DEF\u5F84\n */\nexport function getConfigPath() {\n    const configPath = process.env['CONFIG_PATH'];\n    if (!configPath) {\n        throw new Error('\u8BF7\u8BBE\u7F6E CONFIG_PATH \u73AF\u5883\u53D8\u91CF\u6307\u5B9A\u914D\u7F6E\u6587\u4EF6\u8DEF\u5F84');\n    }\n    return configPath;\n}\n/**\n * \u9A8C\u8BC1\u914D\u7F6E\n */\nexport function validateConfig(config) {\n    const errors = [];\n    // \u57FA\u672C\u9A8C\u8BC1\n    if (!config) {\n        errors.push('\u914D\u7F6E\u4E0D\u80FD\u4E3A\u7A7A');\n        return { valid: false, errors };\n    }\n    // \u68C0\u67E5\u5FC5\u8981\u5B57\u6BB5\n    if (!config.baseUrl) {\n        errors.push('\u7F3A\u5C11baseUrl\u914D\u7F6E');\n    }\n    // \u68C0\u67E5\u67E5\u8BE2\u914D\u7F6E\n    if (config.queries) {\n        Object.entries(config.queries).forEach(([name, query]) => {\n            if (!query.url) {\n                errors.push(`\u67E5\u8BE2 \"${name}\" \u7F3A\u5C11url\u914D\u7F6E`);\n            }\n        });\n    }\n    return {\n        valid: errors.length === 0,\n        errors\n    };\n}\n"],
  "mappings": "AAAA,OAAOA,MAAQ,KACf,OAAOC,MAAU,OACjB,OAAS,iBAAAC,MAAqB,SAI9B,eAAsBC,EAAWC,EAAY,CACzC,GAAI,CAEA,MAAMC,EAAiBD,GAAc,QAAQ,IAAI,YACjD,GAAI,CAACC,EACD,MAAM,IAAI,MAAM,yJAAsC,EAE1D,MAAMC,EAAeL,EAAK,QAAQ,QAAQ,IAAI,EAAGI,CAAc,EAC/D,GAAI,CAACL,EAAG,WAAWM,CAAY,EAC3B,MAAM,IAAI,MAAM,+CAAYA,CAAY,EAAE,EAI9C,MAAMC,EAAUL,EAAc,YAAY,GAAG,EAE7C,OAAOK,EAAQ,MAAMD,CAAY,EACjC,IAAIE,EACJ,GAAI,CACAA,EAAeD,EAAQD,CAAY,CACvC,OACOG,EAAO,CACV,MAAM,IAAI,MAAM,qDAAaA,EAAM,OAAO,8GAAkD,CAChG,CACA,GAAI,CAACD,GAAgB,OAAOA,GAAiB,SACzC,MAAM,IAAI,MAAM,kDAAU,EAE9B,eAAQ,MAAM,6EAAkB,OAAO,KAAKA,EAAa,SAAW,CAAC,CAAC,EAAE,OAAQ,QAAG,EAC5EA,CACX,OACOC,EAAO,CAEV,GAAIA,EAAM,QAAQ,SAAS,wDAAW,GAClCA,EAAM,QAAQ,SAAS,4CAAS,EAChC,MAAMA,EAGV,eAAQ,KAAK,2GAAuBA,EAAM,OAAO,EAC1C,CACH,QAAS,oCACT,eAAgB,CAAE,eAAgB,kBAAmB,EACrD,QAAS,CAAC,CACd,CACJ,CACJ,CAIA,eAAsBC,EAAWC,EAAQP,EAAY,CACjD,GAAI,CACA,MAAMC,EAAiBD,GAAc,QAAQ,IAAI,YACjD,GAAI,CAACC,EACD,MAAM,IAAI,MAAM,yJAAsC,EAE1D,MAAMC,EAAeL,EAAK,QAAQ,QAAQ,IAAI,EAAGI,CAAc,EAEzDO,EAAgB,kBAAkB,KAAK,UAAUD,EAAQ,KAAM,CAAC,CAAC;AAAA;AAAA,0BAEjEE,EAAYZ,EAAK,QAAQK,CAAY,EAC3C,OAAKN,EAAG,WAAWa,CAAS,GACxBb,EAAG,UAAUa,EAAW,CAAE,UAAW,EAAK,CAAC,EAG/C,MAAMb,EAAG,SAAS,UAAUM,EAAcM,EAAe,OAAO,EAChE,QAAQ,MAAM,gDAAaN,CAAY,EAAE,EAClC,EACX,OACOG,EAAO,CACV,eAAQ,MAAM,+CAAaA,CAAK,EACzB,EACX,CACJ,CAIO,SAASK,GAAgB,CAC5B,MAAMV,EAAa,QAAQ,IAAI,YAC/B,GAAI,CAACA,EACD,MAAM,IAAI,MAAM,yGAA8B,EAElD,OAAOA,CACX,CAIO,SAASW,EAAeJ,EAAQ,CACnC,MAAMK,EAAS,CAAC,EAEhB,OAAKL,GAKAA,EAAO,SACRK,EAAO,KAAK,iCAAa,EAGzBL,EAAO,SACP,OAAO,QAAQA,EAAO,OAAO,EAAE,QAAQ,CAAC,CAACM,EAAMC,CAAK,IAAM,CACjDA,EAAM,KACPF,EAAO,KAAK,iBAAOC,CAAI,+BAAW,CAE1C,CAAC,EAEE,CACH,MAAOD,EAAO,SAAW,EACzB,OAAAA,CACJ,IAlBIA,EAAO,KAAK,sCAAQ,EACb,CAAE,MAAO,GAAO,OAAAA,CAAO,EAkBtC",
  "names": ["fs", "path", "createRequire", "loadConfig", "configPath", "configFilePath", "resolvedPath", "require", "loadedConfig", "error", "saveConfig", "config", "configContent", "configDir", "getConfigPath", "validateConfig", "errors", "name", "query"]
}

{
  "version": 3,
  "sources": ["data-store.js"],
  "sourcesContent": ["import fs from 'fs/promises';\nimport path from 'path';\nimport os from 'os';\n// \u6570\u636E\u5B58\u50A8\u6839\u76EE\u5F55\nconst DATA_STORE_ROOT = process.env.DATA_STORE_ROOT ||\n    path.join(os.homedir(), '.grafana-mcp-analyzer', 'data-store');\n// \u786E\u4FDD\u76EE\u5F55\u5B58\u5728\nasync function ensureDir(dirPath) {\n    try {\n        await fs.access(dirPath);\n    }\n    catch {\n        await fs.mkdir(dirPath, { recursive: true });\n    }\n}\n// \u751F\u6210\u8BF7\u6C42ID\nexport function generateRequestId() {\n    return `request-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n// \u5B58\u50A8\u8BF7\u6C42\u5143\u6570\u636E\nexport async function storeRequestMetadata(requestId, metadata) {\n    const requestDir = path.join(DATA_STORE_ROOT, requestId);\n    await ensureDir(requestDir);\n    const metadataPath = path.join(requestDir, 'metadata.json');\n    await fs.writeFile(metadataPath, JSON.stringify({\n        id: requestId,\n        ...metadata\n    }, null, 2));\n}\n// \u83B7\u53D6\u8BF7\u6C42\u5143\u6570\u636E\nexport async function getRequestMetadata(requestId) {\n    const metadataPath = path.join(DATA_STORE_ROOT, requestId, 'metadata.json');\n    try {\n        const content = await fs.readFile(metadataPath, 'utf-8');\n        return JSON.parse(content);\n    }\n    catch (error) {\n        throw new Error(`Request metadata not found: ${requestId}`);\n    }\n}\n// \u5B58\u50A8\u54CD\u5E94\u6570\u636E\nexport async function storeResponseData(requestId, data, maxChunkSize = 500 * 1024 // 500KB - \u964D\u4F4E\u9608\u503C\u4EE5\u652F\u6301\u66F4\u597D\u7684\u5206\u5757\n) {\n    const requestDir = path.join(DATA_STORE_ROOT, requestId);\n    const dataDir = path.join(requestDir, 'data');\n    await ensureDir(dataDir);\n    const dataStr = JSON.stringify(data, null, 2);\n    const dataSize = Buffer.byteLength(dataStr, 'utf8');\n    if (dataSize <= maxChunkSize) {\n        // \u6570\u636E\u8F83\u5C0F\uFF0C\u76F4\u63A5\u5B58\u50A8\u4E3A\u5B8C\u6574\u6587\u4EF6\n        const fullPath = path.join(dataDir, 'full.json');\n        await fs.writeFile(fullPath, dataStr);\n        return {\n            type: 'full',\n            size: dataSize,\n            chunks: 1,\n            resourceUri: `monitoring-data://${requestId}/data`\n        };\n    }\n    else {\n        // \u6570\u636E\u8F83\u5927\uFF0C\u5206\u5757\u5B58\u50A8\n        const chunkSize = maxChunkSize;\n        const totalChunks = Math.ceil(dataSize / chunkSize);\n        for (let i = 0; i < totalChunks; i++) {\n            const start = i * chunkSize;\n            const end = Math.min(start + chunkSize, dataSize);\n            const chunk = dataStr.slice(start, end);\n            const chunkPath = path.join(dataDir, `chunk-${i}.json`);\n            await fs.writeFile(chunkPath, chunk);\n        }\n        return {\n            type: 'chunked',\n            totalChunks,\n            size: dataSize,\n            resourceUris: Array.from({ length: totalChunks }, (_, i) => `monitoring-data://${requestId}/chunk-${i}`)\n        };\n    }\n}\n// \u83B7\u53D6\u54CD\u5E94\u6570\u636E\nexport async function getResponseData(requestId, chunkId) {\n    const dataDir = path.join(DATA_STORE_ROOT, requestId, 'data');\n    if (chunkId) {\n        // \u83B7\u53D6\u7279\u5B9A\u6570\u636E\u5757\n        const chunkPath = path.join(dataDir, `${chunkId}.json`);\n        try {\n            const content = await fs.readFile(chunkPath, 'utf-8');\n            return content;\n        }\n        catch (error) {\n            throw new Error(`Data chunk not found: ${requestId}/${chunkId}`);\n        }\n    }\n    else {\n        // \u5C1D\u8BD5\u83B7\u53D6\u5B8C\u6574\u6570\u636E\n        const fullPath = path.join(dataDir, 'full.json');\n        try {\n            const content = await fs.readFile(fullPath, 'utf-8');\n            return JSON.parse(content);\n        }\n        catch (error) {\n            // \u5982\u679C\u6CA1\u6709\u5B8C\u6574\u6570\u636E\uFF0C\u5C1D\u8BD5\u7EC4\u5408\u5206\u5757\u6570\u636E\n            try {\n                const files = await fs.readdir(dataDir);\n                const chunkFiles = files\n                    .filter(f => f.startsWith('chunk-') && f.endsWith('.json'))\n                    .sort((a, b) => {\n                    const aNum = parseInt(a.match(/chunk-(\\d+)\\.json$/)?.[1] || '0');\n                    const bNum = parseInt(b.match(/chunk-(\\d+)\\.json$/)?.[1] || '0');\n                    return aNum - bNum;\n                });\n                if (chunkFiles.length === 0) {\n                    throw new Error(`No data found for request: ${requestId}`);\n                }\n                let fullData = '';\n                for (const chunkFile of chunkFiles) {\n                    const chunkPath = path.join(dataDir, chunkFile);\n                    const chunkContent = await fs.readFile(chunkPath, 'utf-8');\n                    fullData += chunkContent;\n                }\n                return JSON.parse(fullData);\n            }\n            catch (combineError) {\n                throw new Error(`Failed to get response data: ${requestId}`);\n            }\n        }\n    }\n}\n// \u5217\u51FA\u6570\u636E\u6587\u4EF6\nexport async function listDataFiles(requestId) {\n    const dataDir = path.join(DATA_STORE_ROOT, requestId, 'data');\n    try {\n        const files = await fs.readdir(dataDir);\n        return files.filter(f => f.endsWith('.json'));\n    }\n    catch (error) {\n        return [];\n    }\n}\n// \u5B58\u50A8\u5206\u6790\u7ED3\u679C\nexport async function storeAnalysis(requestId, analysis) {\n    const requestDir = path.join(DATA_STORE_ROOT, requestId);\n    await ensureDir(requestDir);\n    const analysisPath = path.join(requestDir, 'analysis.json');\n    await fs.writeFile(analysisPath, JSON.stringify(analysis, null, 2));\n}\n// \u83B7\u53D6\u5206\u6790\u7ED3\u679C\nexport async function getAnalysis(requestId) {\n    const analysisPath = path.join(DATA_STORE_ROOT, requestId, 'analysis.json');\n    try {\n        const content = await fs.readFile(analysisPath, 'utf-8');\n        return JSON.parse(content);\n    }\n    catch (error) {\n        throw new Error(`Analysis not found: ${requestId}`);\n    }\n}\n// \u5217\u51FA\u6240\u6709\u8BF7\u6C42\nexport async function listAllRequests() {\n    try {\n        await ensureDir(DATA_STORE_ROOT);\n        const dirs = await fs.readdir(DATA_STORE_ROOT);\n        const requests = [];\n        for (const dir of dirs) {\n            if (dir.startsWith('request-')) {\n                try {\n                    const metadata = await getRequestMetadata(dir);\n                    requests.push(metadata);\n                }\n                catch (error) {\n                    // \u8DF3\u8FC7\u65E0\u6548\u7684\u8BF7\u6C42\u76EE\u5F55\n                }\n            }\n        }\n        return requests.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n    }\n    catch (error) {\n        return [];\n    }\n}\n// \u6309\u4F1A\u8BDDID\u5217\u51FA\u8BF7\u6C42\nexport async function listRequestsBySession(sessionId) {\n    const allRequests = await listAllRequests();\n    return allRequests.filter(req => req.sessionId === sessionId);\n}\n// \u5220\u9664\u8BF7\u6C42\u6570\u636E\nexport async function deleteRequest(requestId) {\n    const requestDir = path.join(DATA_STORE_ROOT, requestId);\n    try {\n        await fs.rm(requestDir, { recursive: true });\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n// \u68C0\u67E5\u8BF7\u6C42\u662F\u5426\u5B58\u5728\nexport async function requestExists(requestId) {\n    const requestDir = path.join(DATA_STORE_ROOT, requestId);\n    try {\n        await fs.access(requestDir);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n// \u83B7\u53D6\u8BF7\u6C42\u7EDF\u8BA1\u4FE1\u606F\nexport async function getRequestStats(requestId) {\n    try {\n        const metadata = await getRequestMetadata(requestId);\n        const dataFiles = await listDataFiles(requestId);\n        let totalSize = 0;\n        let dataType = 'none';\n        let resourceUris = [];\n        if (dataFiles.length > 0) {\n            const dataDir = path.join(DATA_STORE_ROOT, requestId, 'data');\n            if (dataFiles.includes('full.json')) {\n                dataType = 'full';\n                const stat = await fs.stat(path.join(dataDir, 'full.json'));\n                totalSize = stat.size;\n                resourceUris = [`monitoring-data://${requestId}/data`];\n            }\n            else {\n                const chunkFiles = dataFiles.filter(f => f.startsWith('chunk-'));\n                if (chunkFiles.length > 0) {\n                    dataType = 'chunked';\n                    for (const file of chunkFiles) {\n                        const stat = await fs.stat(path.join(dataDir, file));\n                        totalSize += stat.size;\n                    }\n                    resourceUris = chunkFiles.map(f => {\n                        const chunkNum = f.match(/chunk-(\\d+)\\.json$/)?.[1];\n                        return `monitoring-data://${requestId}/chunk-${chunkNum}`;\n                    });\n                }\n            }\n        }\n        const hasAnalysis = await fs.access(path.join(DATA_STORE_ROOT, requestId, 'analysis.json'))\n            .then(() => true)\n            .catch(() => false);\n        return {\n            requestId,\n            timestamp: metadata.timestamp,\n            prompt: metadata.prompt,\n            sessionId: metadata.sessionId,\n            dataType,\n            dataFiles: dataFiles.length,\n            totalSize,\n            hasAnalysis,\n            resourceUris\n        };\n    }\n    catch (error) {\n        throw new Error(`Failed to get request stats: ${requestId}`);\n    }\n}\n// \u6E05\u7406\u8FC7\u671F\u6570\u636E\nexport async function cleanupExpiredData(forceCleanAll = false, maxAgeHours = 24) {\n    try {\n        await ensureDir(DATA_STORE_ROOT);\n        const dirs = await fs.readdir(DATA_STORE_ROOT);\n        let deletedCount = 0;\n        const now = Date.now();\n        const maxAge = maxAgeHours * 60 * 60 * 1000; // \u8F6C\u6362\u4E3A\u6BEB\u79D2\n        for (const dir of dirs) {\n            if (dir.startsWith('request-')) {\n                const requestDir = path.join(DATA_STORE_ROOT, dir);\n                try {\n                    if (forceCleanAll) {\n                        // \u5F3A\u5236\u6E05\u7406\u6240\u6709\u6570\u636E\n                        await fs.rm(requestDir, { recursive: true });\n                        deletedCount++;\n                        console.log(`\uD83D\uDDD1\uFE0F \u5220\u9664\u8BF7\u6C42\u76EE\u5F55: ${dir}`);\n                    }\n                    else {\n                        // \u6839\u636E\u65F6\u95F4\u6E05\u7406\u8FC7\u671F\u6570\u636E\n                        const metadata = await getRequestMetadata(dir);\n                        const requestTime = new Date(metadata.timestamp).getTime();\n                        if (now - requestTime > maxAge) {\n                            await fs.rm(requestDir, { recursive: true });\n                            deletedCount++;\n                            console.log(`\uD83D\uDDD1\uFE0F \u5220\u9664\u8FC7\u671F\u8BF7\u6C42: ${dir} (${metadata.timestamp})`);\n                        }\n                    }\n                }\n                catch (error) {\n                    console.warn(`\u26A0\uFE0F \u6E05\u7406\u8BF7\u6C42 ${dir} \u5931\u8D25:`, error);\n                }\n            }\n        }\n        return deletedCount;\n    }\n    catch (error) {\n        console.error('\u274C \u6570\u636E\u6E05\u7406\u5931\u8D25:', error);\n        return 0;\n    }\n}\n// \u83B7\u53D6\u6570\u636E\u5B58\u50A8\u7EDF\u8BA1\u4FE1\u606F\nexport async function getDataStoreStats() {\n    try {\n        await ensureDir(DATA_STORE_ROOT);\n        const dirs = await fs.readdir(DATA_STORE_ROOT);\n        let totalRequests = 0;\n        let totalSize = 0;\n        let oldestRequest = null;\n        let newestRequest = null;\n        let oldestTime = Infinity;\n        let newestTime = 0;\n        for (const dir of dirs) {\n            if (dir.startsWith('request-')) {\n                totalRequests++;\n                try {\n                    const requestDir = path.join(DATA_STORE_ROOT, dir);\n                    // \u8BA1\u7B97\u76EE\u5F55\u5927\u5C0F\n                    const dirSize = await getDirSize(requestDir);\n                    totalSize += dirSize;\n                    // \u83B7\u53D6\u8BF7\u6C42\u65F6\u95F4\n                    const metadata = await getRequestMetadata(dir);\n                    const requestTime = new Date(metadata.timestamp).getTime();\n                    if (requestTime < oldestTime) {\n                        oldestTime = requestTime;\n                        oldestRequest = dir;\n                    }\n                    if (requestTime > newestTime) {\n                        newestTime = requestTime;\n                        newestRequest = dir;\n                    }\n                }\n                catch (error) {\n                    // \u8DF3\u8FC7\u65E0\u6548\u7684\u8BF7\u6C42\u76EE\u5F55\n                }\n            }\n        }\n        return {\n            totalRequests,\n            totalSize,\n            totalSizeMB: (totalSize / (1024 * 1024)).toFixed(2),\n            oldestRequest: oldestRequest ? {\n                id: oldestRequest,\n                timestamp: new Date(oldestTime).toISOString()\n            } : null,\n            newestRequest: newestRequest ? {\n                id: newestRequest,\n                timestamp: new Date(newestTime).toISOString()\n            } : null,\n            storageRoot: DATA_STORE_ROOT\n        };\n    }\n    catch (error) {\n        console.error('\u274C \u83B7\u53D6\u6570\u636E\u5B58\u50A8\u7EDF\u8BA1\u5931\u8D25:', error);\n        return {\n            totalRequests: 0,\n            totalSize: 0,\n            totalSizeMB: '0.00',\n            oldestRequest: null,\n            newestRequest: null,\n            storageRoot: DATA_STORE_ROOT\n        };\n    }\n}\n// \u8BA1\u7B97\u76EE\u5F55\u5927\u5C0F\u7684\u8F85\u52A9\u51FD\u6570\nasync function getDirSize(dirPath) {\n    let totalSize = 0;\n    try {\n        const items = await fs.readdir(dirPath);\n        for (const item of items) {\n            const itemPath = path.join(dirPath, item);\n            const stat = await fs.stat(itemPath);\n            if (stat.isDirectory()) {\n                totalSize += await getDirSize(itemPath);\n            }\n            else {\n                totalSize += stat.size;\n            }\n        }\n    }\n    catch (error) {\n        // \u5FFD\u7565\u9519\u8BEF\uFF0C\u8FD4\u56DE\u5F53\u524D\u7D2F\u8BA1\u5927\u5C0F\n    }\n    return totalSize;\n}\n"],
  "mappings": "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",
  "names": ["fs", "path", "os", "DATA_STORE_ROOT", "ensureDir", "dirPath", "generateRequestId", "storeRequestMetadata", "requestId", "metadata", "requestDir", "metadataPath", "getRequestMetadata", "content", "storeResponseData", "data", "maxChunkSize", "dataDir", "dataStr", "dataSize", "fullPath", "chunkSize", "totalChunks", "i", "start", "end", "chunk", "chunkPath", "_", "getResponseData", "chunkId", "chunkFiles", "f", "a", "b", "aNum", "bNum", "fullData", "chunkFile", "chunkContent", "listDataFiles", "storeAnalysis", "analysis", "analysisPath", "getAnalysis", "listAllRequests", "dirs", "requests", "dir", "listRequestsBySession", "sessionId", "req", "deleteRequest", "requestExists", "getRequestStats", "dataFiles", "totalSize", "dataType", "resourceUris", "file", "stat", "chunkNum", "hasAnalysis", "cleanupExpiredData", "forceCleanAll", "maxAgeHours", "deletedCount", "now", "maxAge", "requestTime", "error", "getDataStoreStats", "totalRequests", "oldestRequest", "newestRequest", "oldestTime", "newestTime", "dirSize", "getDirSize", "items", "item", "itemPath"]
}

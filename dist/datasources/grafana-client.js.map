{
  "version": 3,
  "sources": ["grafana-client.js"],
  "sourcesContent": ["import axios from 'axios';\nimport { parseCurlCommand } from './curl-parser.js';\nconst DEFAULT_TIMEOUT = 30000; // \u9ED8\u8BA4\u8BF7\u6C42\u8D85\u65F6\u65F6\u95F4\uFF0830\u79D2\uFF09 - \u907F\u514D\u957F\u65F6\u95F4\u7B49\u5F85\n/**\n * \u6267\u884CGrafana\u67E5\u8BE2\n */\nexport async function executeQuery(request, baseUrl) {\n    try {\n        let actualRequest;\n        // \u68C0\u67E5\u662F\u5426\u662Fcurl\u683C\u5F0F\u7684\u67E5\u8BE2\n        if ('curl' in request) {\n            actualRequest = parseCurlCommand(request.curl);\n        }\n        else {\n            actualRequest = request;\n        }\n        // \u786E\u4FDDURL\u5B58\u5728\n        if (!actualRequest.url) {\n            throw new Error('\u7F3A\u5C11URL\u914D\u7F6E');\n        }\n        const url = actualRequest.url.startsWith('http') ? actualRequest.url : `${baseUrl}/${actualRequest.url}`;\n        const response = await axios({\n            url,\n            method: actualRequest.method || 'POST',\n            headers: actualRequest.headers || { 'Content-Type': 'application/json' },\n            data: actualRequest.data,\n            params: actualRequest.params,\n            timeout: actualRequest.timeout || DEFAULT_TIMEOUT,\n            ...actualRequest.axiosConfig\n        });\n        return {\n            success: true,\n            status: response.status,\n            statusText: response.statusText,\n            headers: Object.fromEntries(Object.entries(response.headers).map(([k, v]) => [k, String(v)])),\n            data: response.data\n        };\n    }\n    catch (error) {\n        if (error.response) {\n            // \u670D\u52A1\u5668\u8FD4\u56DE\u4E86\u9519\u8BEF\u54CD\u5E94\n            return {\n                success: false,\n                status: error.response.status,\n                statusText: error.response.statusText,\n                headers: Object.fromEntries(Object.entries(error.response.headers || {}).map(([k, v]) => [k, String(v)])),\n                data: error.response.data,\n                error: `HTTP\u9519\u8BEF: ${error.response.status} ${error.response.statusText}`\n            };\n        }\n        else if (error.request) {\n            // \u8BF7\u6C42\u5DF2\u53D1\u9001\u4F46\u672A\u6536\u5230\u54CD\u5E94\n            return {\n                success: false,\n                error: `\u65E0\u54CD\u5E94: ${error.message || '\u8BF7\u6C42\u8D85\u65F6\u6216\u7F51\u7EDC\u9519\u8BEF'}`\n            };\n        }\n        else {\n            // \u8BF7\u6C42\u8BBE\u7F6E\u65F6\u51FA\u73B0\u95EE\u9898\n            return {\n                success: false,\n                error: `\u8BF7\u6C42\u9519\u8BEF: ${error.message || '\u672A\u77E5\u9519\u8BEF'}`\n            };\n        }\n    }\n}\n/**\n * \u4ECEHTTP\u54CD\u5E94\u4E2D\u63D0\u53D6\u6570\u636E\n */\nexport function extractData(response) {\n    if (!response.success) {\n        return {\n            hasData: false,\n            type: 'error',\n            status: String(response.status || 'error'),\n            timestamp: new Date().toISOString(),\n            data: { error: response.error },\n            metadata: {\n                error: response.error,\n                status: response.status\n            }\n        };\n    }\n    // \u68C0\u6D4B\u6570\u636E\u7C7B\u578B\n    let type = 'unknown';\n    let hasData = false;\n    if (response.data) {\n        if (response.data.results) {\n            type = 'grafana-query';\n            hasData = true;\n        }\n        else if (response.data.series) {\n            type = 'timeseries';\n            hasData = Array.isArray(response.data.series) && response.data.series.length > 0;\n        }\n        else if (response.data.tables) {\n            type = 'tables';\n            hasData = Array.isArray(response.data.tables) && response.data.tables.length > 0;\n        }\n        else if (response.data.responses) {\n            type = 'elasticsearch';\n            hasData = Array.isArray(response.data.responses) && response.data.responses.length > 0;\n        }\n        else if (Array.isArray(response.data)) {\n            type = 'array';\n            hasData = response.data.length > 0;\n        }\n        else if (typeof response.data === 'object') {\n            type = 'object';\n            hasData = Object.keys(response.data).length > 0;\n        }\n        else {\n            type = typeof response.data;\n            hasData = response.data !== null && response.data !== undefined;\n        }\n    }\n    return {\n        hasData,\n        type,\n        status: String(response.status || 200),\n        timestamp: new Date().toISOString(),\n        data: response.data,\n        metadata: {\n            contentType: response.headers?.['content-type'],\n            responseSize: JSON.stringify(response.data).length\n        }\n    };\n}\n/**\n * \u68C0\u67E5\u5065\u5EB7\u72B6\u6001\n */\nexport async function checkHealth(url, options) {\n    try {\n        const response = await axios.get(url, {\n            timeout: options?.timeout || 5000\n        });\n        const expectedStatus = options?.expectedStatus || 200;\n        return {\n            status: response.status === expectedStatus ? 'healthy' : 'warning',\n            timestamp: new Date().toISOString(),\n            message: `\u72B6\u6001\u7801: ${response.status}`,\n            details: {\n                status: response.status,\n                statusText: response.statusText,\n                expectedStatus\n            }\n        };\n    }\n    catch (error) {\n        return {\n            status: 'unhealthy',\n            timestamp: new Date().toISOString(),\n            message: error.code === 'ECONNABORTED' ? '\u5065\u5EB7\u68C0\u67E5\u8D85\u65F6' : error.message,\n            details: {\n                code: error.code,\n                isTimeout: error.code === 'ECONNABORTED'\n            }\n        };\n    }\n}\n/**\n * \u6279\u91CF\u6267\u884C\u67E5\u8BE2\uFF08\u5E76\u53D1\u6267\u884C\u591A\u4E2A\u67E5\u8BE2\uFF09\n *\n * @param requests \u67E5\u8BE2\u8BF7\u6C42\u6570\u7EC4\n * @param baseUrl \u57FA\u7840URL\n * @param options \u9009\u9879\u914D\u7F6E\n * @returns \u6279\u91CF\u67E5\u8BE2\u7ED3\u679C\n */\nexport async function executeBatchQueries(requests, baseUrl = '', options = {}) {\n    const { concurrency = 5, failFast = false } = options;\n    if (requests.length === 0) {\n        return [];\n    }\n    // \u5206\u6279\u6267\u884C\u4EE5\u63A7\u5236\u5E76\u53D1\u6570\n    const results = [];\n    for (let i = 0; i < requests.length; i += concurrency) {\n        const batch = requests.slice(i, i + concurrency);\n        const batchPromises = batch.map(request => executeQuery(request, baseUrl));\n        try {\n            const batchResults = await Promise.all(batchPromises);\n            results.push(...batchResults);\n            // \u5982\u679C\u542F\u7528\u5FEB\u901F\u5931\u8D25\u4E14\u6709\u5931\u8D25\u7684\u8BF7\u6C42\uFF0C\u7ACB\u5373\u505C\u6B62\n            if (failFast && batchResults.some(result => !result.success)) {\n                break;\n            }\n        }\n        catch (error) {\n            // \u5982\u679C\u6574\u4E2A\u6279\u6B21\u5931\u8D25\uFF0C\u6DFB\u52A0\u9519\u8BEF\u7ED3\u679C\n            const errorResults = batch.map(() => ({\n                success: false,\n                error: `\u6279\u91CF\u67E5\u8BE2\u5931\u8D25: ${error}`,\n                status: undefined,\n                data: undefined\n            }));\n            results.push(...errorResults);\n            if (failFast) {\n                break;\n            }\n        }\n    }\n    return results;\n}\n"],
  "mappings": "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",
  "names": ["axios", "parseCurlCommand", "DEFAULT_TIMEOUT", "executeQuery", "request", "baseUrl", "actualRequest", "url", "response", "k", "v", "error", "extractData", "type", "hasData", "checkHealth", "options", "expectedStatus", "executeBatchQueries", "requests", "concurrency", "failFast", "results", "i", "batch", "batchPromises", "batchResults", "result", "errorResults"]
}
